# üö® SCRIPT DE MIGRATION TAILWINDCSS v4 ‚Üí v3 LTS + SHADCN/UI (PowerShell)
# Task ID: 6dfe467e-5151-4228-88f0-7e86dfd7f08f
# Priorit√©: SUPER PRIORITAIRE üî•

param(
    [switch]$DryRun,
    [switch]$Help,
    [switch]$RunE2E
)

# Configuration
$ErrorActionPreference = "Stop"

# Couleurs pour les logs
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor $Color
}

function Log { param([string]$Message) Write-ColorOutput $Message "Green" }
function Warn { param([string]$Message) Write-ColorOutput "[WARNING] $Message" "Yellow" }
function Error { param([string]$Message) Write-ColorOutput "[ERROR] $Message" "Red" }
function Info { param([string]$Message) Write-ColorOutput "[INFO] $Message" "Cyan" }

# Afficher l'aide
if ($Help) {
    Write-Host "Usage: .\migrate-tailwind.ps1 [-DryRun] [-RunE2E] [-Help]"
    Write-Host "Options:"
    Write-Host "  -DryRun     V√©rifier les pr√©requis sans ex√©cuter la migration"
    Write-Host "  -RunE2E     Ex√©cuter les tests E2E (par d√©faut: false)"
    Write-Host "  -Help       Afficher cette aide"
    exit 0
}

# V√©rifications pr√©alables
function Check-Prerequisites {
    Log "üîç V√©rification des pr√©requis..."
    
    # V√©rifier Node.js version
    try {
        $nodeVersion = node --version
        $majorVersion = [int]($nodeVersion -replace 'v(\d+)\..*', '$1')
        if ($majorVersion -lt 18) {
            Error "Node.js version 18+ requis. Version actuelle: $nodeVersion"
            exit 1
        }
    } catch {
        Error "Node.js n'est pas install√© ou accessible"
        exit 1
    }
    
    # V√©rifier npm
    try {
        $npmVersion = npm --version
        Info "npm version: $npmVersion"
    } catch {
        Error "npm n'est pas install√© ou accessible"
        exit 1
    }
    
    # V√©rifier Git
    try {
        $gitVersion = git --version
        Info "Git d√©tect√©: $gitVersion"
    } catch {
        Error "Git n'est pas install√© ou accessible"
        exit 1
    }
    
    # V√©rifier fichiers du projet
    if (-not (Test-Path "package.json") -or -not (Test-Path "tailwind.config.js")) {
        Error "Vous devez √™tre dans le r√©pertoire racine du projet (avec package.json et tailwind.config.js)"
        exit 1
    }
    
    Info "‚úÖ Pr√©requis valid√©s"
}

# Sauvegarde et audit initial
function Backup-AndAudit {
    Log "üîç √âTAPE 1: Sauvegarde et audit initial..."
    
    # Cr√©er branche de sauvegarde
    $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
    try {
        git checkout -b "backup-before-tailwind-migration-$timestamp"
        git add .
        git commit -m "üîß Backup avant migration TailwindCSS v4‚Üív3"
    } catch {
        Warn "Impossible de cr√©er la branche de sauvegarde (possible si aucun changement)"
    }
    
    # V√©rifier versions actuelles
    Info "Versions actuelles:"
    try { npm list tailwindcss } catch { }
    try { npm list @tailwindcss/vite @tailwindcss/postcss @tailwindcss/cli } catch { }
    try { npm list autoprefixer postcss } catch { }
    
    # Sauvegarder fichiers de configuration
    Copy-Item "tailwind.config.js" "tailwind.config.js.backup"
    Copy-Item "postcss.config.js" "postcss.config.js.backup"
    Copy-Item "components.json" "components.json.backup"
    Copy-Item "package.json" "package.json.backup"
    
    Info "‚úÖ Sauvegarde termin√©e"
}

# D√©sinstallation v4
function Uninstall-V4 {
    Log "üóëÔ∏è √âTAPE 2: D√©sinstallation TailwindCSS v4..."
    
    # D√©sinstaller paquets Tailwind
    try { npm uninstall tailwindcss @tailwindcss/vite @tailwindcss/postcss @tailwindcss/cli } catch { }
    
    # Nettoyer cache
    npm cache clean --force
    
    # Fresh start
    if (Test-Path "node_modules") { Remove-Item -Recurse -Force "node_modules" }
    if (Test-Path "package-lock.json") { Remove-Item -Force "package-lock.json" }
    
    Info "‚úÖ D√©sinstallation v4 termin√©e"
}

# Installation v3 LTS
function Install-V3 {
    Log "üì¶ √âTAPE 3: Installation TailwindCSS v3 LTS..."
    
    # Installer TailwindCSS v3 LTS + d√©pendances core
    npm install -D tailwindcss@latest postcss@latest autoprefixer@latest
    
    # Installer plugins n√©cessaires
    npm install -D @tailwindcss/typography@latest @tailwindcss/forms@latest @tailwindcss/aspect-ratio@latest
    
    # Installer autres d√©pendances
    npm install
    
    # V√©rifier version install√©e
    $tailwindInfo = npm list tailwindcss --depth=0
    $tailwindVersion = ($tailwindInfo | Select-String "tailwindcss@").ToString().Split("@")[1]
    Info "Version TailwindCSS install√©e: $tailwindVersion"
    
    if (-not $tailwindVersion.StartsWith("3.")) {
        Error "La version install√©e n'est pas v3.x.x: $tailwindVersion"
        exit 1
    }
    
    Info "‚úÖ Installation v3 LTS termin√©e"
}

# Configuration PostCSS
function Configure-PostCSS {
    Log "‚öôÔ∏è √âTAPE 4: Configuration PostCSS..."
    
    # Cr√©er configuration v3 standard
    $postcssConfig = @"
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
"@
    
    $postcssConfig | Out-File -FilePath "postcss.config.js" -Encoding UTF8
    
    Info "‚úÖ Configuration PostCSS mise √† jour"
}

# Validation Tailwind config
function Validate-TailwindConfig {
    Log "üîß √âTAPE 5: Validation configuration Tailwind..."
    
    # Tester g√©n√©ration CSS
    npx tailwindcss -i ./src/styles/globals.css -o ./test-output.css
    
    if (-not (Test-Path "./test-output.css")) {
        Error "√âchec de la g√©n√©ration CSS"
        exit 1
    }
    
    # V√©rifier contenu g√©n√©r√©
    $cssSize = (Get-Item "./test-output.css").Length
    if ($cssSize -lt 1000) {
        Error "Fichier CSS g√©n√©r√© trop petit ($cssSize bytes)"
        exit 1
    }
    
    Info "CSS g√©n√©r√©: $cssSize bytes"
    Remove-Item "./test-output.css" -Force
    
    Info "‚úÖ Configuration Tailwind valid√©e"
}

# Mise √† jour shadcn/ui
function Update-Shadcn {
    Log "üé® √âTAPE 6: Mise √† jour shadcn/ui..."
    
    # Mettre √† jour CLI shadcn
    try { npm install -g shadcn@latest } catch { Warn "Impossible de mettre √† jour shadcn globalement" }
    
    # V√©rifier components.json
    if (-not (Test-Path "components.json")) {
        Error "components.json introuvable"
        exit 1
    }
    
    # R√©installer composants critiques
    try { npx shadcn@latest add button --overwrite } catch { Warn "√âchec r√©installation button" }
    try { npx shadcn@latest add tabs --overwrite } catch { Warn "√âchec r√©installation tabs" }
    try { npx shadcn@latest add progress --overwrite } catch { Warn "√âchec r√©installation progress" }
    
    Info "‚úÖ shadcn/ui mis √† jour"
}

# Validation build et dev
function Validate-Build {
    Log "üèóÔ∏è √âTAPE 7: Validation build et dev..."
    
    # Test build production
    npm run build
    if ($LASTEXITCODE -ne 0) {
        Error "√âchec du build production"
        exit 1
    }
    
    # Test type checking
    try { npm run type-check } catch { Warn "Type checking √©chou√©" }
    
    Info "‚úÖ Build valid√©"
}

# Tests de r√©gression
function Run-Tests {
    Log "üß™ √âTAPE 8: Tests de r√©gression..."
    
    # Tests unitaires
    try { npm run test } catch { Warn "Tests unitaires √©chou√©s" }
    
    # Tests E2E (optionnel)
    if ($RunE2E) {
        try { npm run test:e2e } catch { Warn "Tests E2E √©chou√©s" }
    } else {
        Info "Tests E2E ignor√©s (utiliser -RunE2E pour les ex√©cuter)"
    }
    
    # Linting
    try { npm run lint } catch { Warn "Linting √©chou√©" }
    
    Info "‚úÖ Tests termin√©s"
}

# Documentation et finalisation
function Finalize-Migration {
    Log "üìù √âTAPE 9: Finalisation..."
    
    # Nettoyer fichiers temporaires
    if (Test-Path "test-output.css") { Remove-Item "test-output.css" -Force }
    Get-ChildItem "*.backup" | Remove-Item -Force
    
    # Commit des changements
    git add .
    git commit -m "‚úÖ Migration TailwindCSS v4‚Üív3 LTS + shadcn/ui compatibility"
    
    # Cr√©er tag
    git tag -a v1.0.0-tailwind-v3-stable -m "üéØ TailwindCSS v3 LTS stable + shadcn/ui compatible"
    
    # Afficher r√©sum√©
    Log "üéâ MIGRATION TERMIN√âE AVEC SUCC√àS!"
    $tailwindInfo = npm list tailwindcss --depth=0
    $tailwindVersion = ($tailwindInfo | Select-String "tailwindcss@").ToString().Split("@")[1]
    Info "Version TailwindCSS: $tailwindVersion"
    Info "Tag cr√©√©: v1.0.0-tailwind-v3-stable"
    $commitHash = git rev-parse --short HEAD
    Info "Commit: $commitHash"
    
    Info "‚úÖ Migration finalis√©e"
}

# Fonction de rollback
function Invoke-Rollback {
    Error "üÜò ROLLBACK ACTIV√â"
    
    # Revenir aux fichiers de sauvegarde
    if (Test-Path "tailwind.config.js.backup") {
        Copy-Item "tailwind.config.js.backup" "tailwind.config.js"
    }
    if (Test-Path "postcss.config.js.backup") {
        Copy-Item "postcss.config.js.backup" "postcss.config.js"
    }
    if (Test-Path "components.json.backup") {
        Copy-Item "components.json.backup" "components.json"
    }
    if (Test-Path "package.json.backup") {
        Copy-Item "package.json.backup" "package.json"
        npm install
    }
    
    Warn "Fichiers restaur√©s. V√©rifiez manuellement l'√©tat du projet."
}

# MAIN EXECUTION
function Main {
    try {
        Log "üö® D√âBUT MIGRATION TAILWINDCSS v4 ‚Üí v3 LTS + SHADCN/UI"
        Log "Task ID: 6dfe467e-5151-4228-88f0-7e86dfd7f08f"
        
        Check-Prerequisites
        
        if ($DryRun) {
            Log "üîç MODE DRY-RUN (simulation uniquement)"
            Log "Pr√©requis OK - migration peut √™tre lanc√©e"
            return
        }
        
        Backup-AndAudit
        Uninstall-V4
        Install-V3
        Configure-PostCSS
        Validate-TailwindConfig
        Update-Shadcn
        Validate-Build
        Run-Tests
        Finalize-Migration
        
        Log "üéâ MIGRATION R√âUSSIE!"
        
    } catch {
        Error "Erreur durant la migration: $_"
        Invoke-Rollback
        exit 1
    }
}

# Ex√©cution
Main
